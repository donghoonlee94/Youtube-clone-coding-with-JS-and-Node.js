nodeMon : 소스 수정 시 자동으로 서버를 재시작 해주는 것. 
명령어 예시 : "nodemon --exec babel-node index.js --delay 2"

babel : ES6를 사용할 수 있게 해주는 컴파일러
사용법 : .babelrc 파일을 만들고 설정 코드를 작성해야함.

middleware dependency 

    body-parser: form을 통해 데이터가 오는 것을 이해하기 위한 middleware // json = json , unlencoded = html
    cookie-parser: cookie에 저장된 정보를 이해하기 위한 middleware
    helmet: 보안 강화를 위한 middleware
    morgan: logging을 위한 middleware

pug : javascript로 html을 작성할 수 있는 Node Express Templete Engine
app.set("view engine", "pug"); 으로 view engine을 set하고 사용할 수 있음.
공통 레이아웃 부분을 extends로 파일을 확장하여 처리 가능

dotenv : key를 숨겨야 할 때, .env 파일을 참고할 수 있게 해줌.

multer : 파일 업로드를 위해 사용하는 node.js의 미들웨어. form의 enctype이 multipart/form-data 일 경우에만 작동함.

---사용법---
https://github.com/expressjs/multer/blob/master/doc/README-ko.md

// dest or storage : 파일을 저장할 곳을 지정.
const multerVideo = multer({ dest: "videos/" }); 

// single : 하나의 파일만 , 인자는 input의 name을 인자로 받음. 해당 name으로 들어오는 파일에 대한 처리.
export const uploadVideo = multerVideo.single("videoFile");

// webpack, package.json 에서 script 구문에 아래 코드를 추가하면 npm dev:assets, npm build:assets으로 실행 시킬 수 있고 WEBPACK_ENV에 dev, prod 가 들어간다.
    "dev:assets": "WEBPACK_ENV=development webpack",
    "build:assets": "WEBPACK_ENV=production webpack"

// windows 환경에서 .env 내에 변수를 동적으로 변환하기 위해서는 cross-env를 설치 & 사용해야 한다. 스크립트 앞에 작성 ( "dev:assets": "croess-env WEBPACK_ENV=development webpack", )